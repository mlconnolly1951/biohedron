/* MSP copyright 1996 by Michael L. Connolly */
/* last revised January 9, 2002 */

void set_fatal ();
void set_error1 (char *);
void set_error2 (char *);
void print_error ();
void inform (char *);
void informd (char *);
void informd2 (char *);
int init_routing (FILE *, FILE *, FILE *);
int error ();
void null_terminate (char *, char);
int isdouble (char *);
struct array *read_lines (FILE *);
struct msdata *newmsdata ();
int freemsdata (struct msdata *);
int addfloats (struct msdata *, long, long, float *);
int addlongs (struct msdata *, long, long, long *, int);
int addbytes (struct msdata *, long, long, unsigned char *);
struct array *new_array (long, long);
int free_array (struct array *);
int store_integer (struct array *, long, long);
long fetch_integer (struct array *, long);
int store_real (struct array *, long, double);
double fetch_real (struct array *, long);
int store_sphere (struct array *, long, double [3], double);
double fetch_sphere (struct array *, long, double [3]);
int store_atom (struct array *, long, struct atom *);
struct atom *fetch_atom (struct array *, long);
int store_bond (struct array *, long, struct bond *);
struct bond *fetch_bond (struct array *, long);
int store_string (struct array *, long, char *);
char *fetch_string (struct array *, long);
int setup_alpha (struct molecule *);
void face_alpha (struct molecule *, struct surface *);
int put_atom(double[3], double, double, double, char *, char *, char *, char *, char *, char *, int, int, int, int, int, double, double, double);
void get_atom(int, double[3], double *, double *, char[MAX_ATNAME], char[MAX_ATNAME], char[MAX_ATNAME], int *, int *, int *, int *, int *, double *, double *, double *, double *);
void add_bond(int, int);
void delete_bond(int, int);
void connect_command(char *, double);
void disconnect_command(char *, char *);
int named_set(char *, int);
int count_command(char *);
void clear_command(char *);
int protected_set(char *);
void assignment(char *, char *, char *, char *);
void times_equals(char *, char *, char *, char *);
void plus_equals(char *, char *, char *, char *);
void minus_equals(char *, char *, char *, char *);
void handle_intersection(char *, char *, char *);
void handle_union(char *, char *, char *);
void handle_subtraction(char *, char *, char *);
void simple_set_copy(char *, char *);
void chooser(int, int, char *, char *, char *);
void atom_field(int, int, char *, char *);
void residue_field(int, int, char *, char *);
void sequence_field(int, int, char *, char *);
void subunit_field(int, int, char *, char *);
void suffix_field(int, int, char *, char *);
void pdb_field(int, int, char *, char *);
void kind_field(int, int, char *, char *);
int string_relation(char *, char *, char *);
void center_field(int, int, char *, char *);
int space_relation(char *, double[3], double[3], double, double[3]);
void occupancy_field(int, int, char *, char *);
void tfactor_field(int, int, char *, char *);
int real_relation(char *, double, double);
void element_field(int, int, char *, char *);
void anumber_field(int, int, char *, char *);
void rnumber_field(int, int, char *, char *);
void molecule_field(int, int, char *, char *);
void type_field(int, int, char *, char *);
int integer_relation(char *, int, int);
void field_assignment(char *, char *, char *);
void one_field(int, char *, char *);
double get_atom_radius(int);
void set_atom_radius(int, double);
double get_atom_covalent(int);
void set_atom_covalent(int, double);
double get_atom_ball(int);
void set_atom_ball(int, double);
double get_atom_angle(int);
void set_atom_angle(int, double);
double get_atom_density(int);
void set_atom_density(int, double);
double get_atom_occupancy(int);
void set_atom_occupancy(int, double);
double get_atom_opacity(int);
void set_atom_opacity(int, double);
double get_atom_tfactor(int);
void set_atom_tfactor(int, double);
void get_atom_center(int, double[3]);
void set_atom_center(int, double[3]);
void set_atom_type(int, int);
int get_atom_type(int);
void set_atom_element(int, int);
int get_atom_element(int);
void set_atom_anumber(int, int);
int get_atom_anumber(int);
void set_atom_srn(int, int);
int get_atom_srn(int);
void set_atom_molecule(int, int);
int get_atom_molecule(int);
void set_atom_color(int, int);
int get_atom_color(int);
void get_atom_subunit(int, char[MAX_ATNAME]);
void get_atom_name(int, char[MAX_ATNAME]);
void get_atom_group(int, char[MAX_ATNAME]);
void get_atom_sequence(int, char[MAX_ATNAME]);
void get_atom_pdb(int, char[MAX_ATNAME]);
void get_atom_kind(int, char[MAX_ATNAME]);
void set_atom_subunit(int, char[MAX_ATNAME]);
void set_atom_name(int, char[MAX_ATNAME]);
void set_atom_group(int, char[MAX_ATNAME]);
void set_atom_sequence(int, char[MAX_ATNAME]);
void set_atom_pdb(int, char[MAX_ATNAME]);
void set_atom_kind(int, char[MAX_ATNAME]);
int bisect_face (struct face *);
struct face *split_face (struct face *, struct arc *, struct edge *, struct edge *, struct edge *, struct edge *);
struct arc *select_pair (struct face *, struct edge **, struct edge **, struct edge **, struct edge **);
int first_and_third(double[3], double[3], double[3], double[3]);
int simplify(struct face *);
int connect_pair(struct cycle *, struct cycle *, struct arc *);
struct arc *closest_pair(struct face *, struct cycle *, struct cycle *);
struct face *entire_sphere(struct face *);
struct face *circle_face(struct face *);
int equal(double, double);
int away(struct face *, double[3], double *);
int face_center(struct face *, double[3]);
double closest_vertex(double[3], struct face *);
void add_chunk (struct atom *, int, double, double, double);
void setup_second_links (struct surface *);
struct chunk *new_chunk (struct atom *, int, double, double, double);
double aliquot (struct face *, int);
int write_area (struct surface *, FILE *, char *);
int write_atom_area (struct surface *, FILE *);
int write_atom_component (struct surface *, FILE *);
int write_component_atom (struct surface *, FILE *);
int gather (struct face *, int [3]);
int write_volume1 (struct surface *, FILE *);
int write_volume2 (struct surface *);
void sort_points (double [3], double, double [3], int, double [][3], short [], short []);
int get_tangent (struct arc *, int, int, double [3]);
int middle (struct arc *, double [3]);
int circle_circle (struct circle *, struct circle *, double [2][3]);
int arc_arc (struct arc *, struct arc *, double [2][3]);
int edg_edg (struct edge *, struct edge *, double [2][3]);
int point_in_arc (double [3], struct arc *);
int arc_plane (struct arc *, double [3], double [3], double [2][3]);
int circle_plane (struct circle *, double [3], double [3], double [2][3]);
double arc_ang (struct arc *);
double theta_circle (struct circle *, int, struct variety *, double);
double arc_length (struct arc *);
double edge_delta (struct edge *, struct edge *, double [3]);
double circum (struct cycle *);
int edges_in_cycle (struct cycle *);
int edges_in_face (struct face *);
void do_clipping (struct msscene *);
void clip_polyhedra (struct msscene *);
void clip_bunch (struct surface *, double [3], double [3]);
void clip_edge (struct surface *, struct phnedg *, double [3], double [3]);
void clip_polygon (struct surface *, struct polygon *, double [3], double [3]);
void clip_tri (struct surface *, struct polygon *, int, int, int, double [3], double [3]);
void find_components (struct surface *);
void same_component (struct arc *);
void cusp_trimming (struct surface *);
void initialize_cusp_trimming(struct surface *);
void do_point_cusps(struct surface *);
void do_saddle_cusps(struct surface *);
void saddle_cone(struct face *);
void saddle_triangle(struct face *);
void append_arc(struct arc *, struct arc *, struct face *);
void create_cusp_circles(struct surface *);
int probe_eats_circle(double, double[3], double[3], double, double[3]);
void create_point_tori(struct surface *);
void append_cusp(struct surface *, struct cusp *);
void assign_vertices_to_cusps(struct surface *);
void add_vertex_to_cusp(struct cusp *, struct vertex *, int);
void all_cusp_arcs(struct surface *);
void make_cusp_arcs(struct surface *, struct cusp *);
void make_full_cusp_arcs(struct surface *);
int full_cusp_ok(struct cusp *);
void full_cusp(struct surface *, struct cusp *);
int vector_in_face(double[3], struct face *);
int point_in_pyr(double[3], struct face *);
int ciomcfn(struct circle *, struct face *);
void allocate_extensions(struct surface *);
void concave_face_edges(struct surface *);
void concave_face_cusps(struct surface *);
void cusp_intersections(struct surface *);
void one_axial(struct face *);
int edge_eaten(struct edge *, struct probe *);
void delete_fully_eaten(struct surface *, struct face *);
void one_non_axial (struct surface *, struct face *, int);
struct cusp *find_cusp(struct probe *, struct probe *);
int vertex_resort(struct surface *, struct probe *, struct arc *, struct cusp *);
struct arc *non_axial_arc(struct surface *, struct vertex *, struct vertex *, struct cusp *);
int split_cusp_edge(struct surface *, struct edge *, struct probe *, struct probe *, struct edge *);
void probe_cycles(struct surface *);
double find_closest_probe(struct surface *, double[3], struct probe *, struct probe *, struct probe *, struct probe **);

struct face *pre_form(struct surface *, struct sphere *);
int form_cycles(struct face *, struct solid_angle *);
void group_cycles (struct surface *, struct face *, struct solid_angle *);
int disk_overlap(double[3], double, double[3], double[3], double, double);
int disk_contain(double[3], double, double[3], double[3], double, double);
int contain (struct cycle *, struct cycle *, double [3], double);
struct surface *density_to_polyhedron (struct surface *, double, double, int);
int polyhedron_and_density (struct surface *, struct surface *, double, long, int);

struct surface *create_density (double, int [3], int [3]);
struct surface *subtract_densities (struct surface *, struct surface *);
struct surface *add_densities (struct surface *, struct surface *);
struct surface *combine_densities (struct surface *, struct surface *, double);
struct surface *read_density (FILE *);
int get_line (char [], int, FILE *);
int write_density (struct surface *, FILE *);
long collect_den_vtx0 (struct surface *, double, struct denvtx **);

int subdivide_arc(struct surface *, struct arc *);
int render_sub_arc (struct arc *, double **, double);
int curved_subdivision(struct surface *, struct arc *, struct vertex ***);
int straight_subdivision(struct surface *, struct arc *, int, struct vertex ***);
struct arc *make_straight_arc(struct surface *, struct vertex *, struct vertex *);
struct edge *make_straight_edge(struct surface *, struct vertex *, struct vertex *);

void dsaac (struct circle *, int, double, double);
void dsall ();
void dsarbp (double   [3], double [3]);
void dsbtree ();
void dsccir (struct circle  *);
void dsclean ();
void dscount ();
void dscpi (struct circle *, double [3], double [3]);
void dscross (double [3], double [3], double [3]);
void dscsi (struct circle *, int);
void dsdget (struct dsdesc *);
void dsdini (struct dsdesc *);
void dsdput (struct dsdesc *);
void dserr (int, char *);
void dsfbox (struct box *);
void dsfcir (struct circle *);
void dsfclu (struct cluster *);
void dsfrun (struct run *);
void dsgetir (struct hidden *);
void dsgtor ();
void dsinch ();
void dsirini (struct hidden *);
void dslfa (struct circle *);
void dslocal ();
void dsnoend (struct circle *);
void dsnti (struct circle *, atomnum *);
void dsplace ();
void dsplin ();
void dsprbs ();
void dsputir (struct hidden *);
void dsstage (char *);
void dsstep (struct probe *);

int dscyc (int, atomnum *, struct tlist *, double [3], double *);
int dsair (double [3][2], int);
int dsans (atomnum *);
int dsfree (struct dsdesc *);
int dsii (double [2], double [2]);
int dslen (struct run *);
int dsnize (double [3]);
int dsouch (struct dsdesc *);
int dsrib (double [3][2], double [3][2]);

double dsdis (double [3], double [3]);
double dsdis2 (double [3], double [3]);
double dsdot (double *, double  *);
double dshei (struct probe *);
double dsnorm (double [3]);
double dstrip (double [3], double [3], double [3]);

atomnum *dsaa (atomnum *, int);
atomnum *dsgair(double [3][2], struct box *);
atomnum *dsmrga (atomnum *[8]);
atomnum *dsmut (int, int);
atomnum *dsupk (struct run *);

struct run *dsand (struct run *, struct run *);
struct cluster *dscvx (int, struct tlist *);
struct cluster *dsdivid (struct circle *);
struct cluster *dsmerge (struct cluster *);
struct box *dsmkbox (double   bounds[3][2], int);
struct circle  *dsnwcir (double [3], double, double [3]);
struct endpnt *dsnwept (int, double, int);
struct probe *dsnwprb (int, int, int, double [3]);
struct torus *dsnwtor (int, int, struct circle *);
struct box *dspaib (int, struct box *);
struct run *dspak (atomnum *);
struct probe *dsplook (int, int, int);
struct probe *dsplop (struct probe *, double [3], int, int, int);
struct cluster *dsprb (struct probe *);
struct cluster *dstor (struct torus *, int);

int determine_ntab ();

void do_draw(struct msscene *, FILE *);
void draw_scene (struct msscene *);
void draw_molecule (struct msscene *);
void init_counters (struct msscene *);
void init_parameters (struct msscene *);
void init_bounds (struct msscene *);
void init_center (struct msscene *);
void init_window (struct msscene *);
void setup_mol_bounds (struct molecule *);
void setup_surface_bounds (struct surface *);
void setup_polygons (struct msscene *);
void min_max (struct molecule *);
void transform_all_surface (struct msscene *);
void transform_surface (struct msscene *, struct surface *);
void rotate_lsource (struct msscene *);
void rotate_clip (struct msscene *);
double get_function (struct surface *, struct phnvtx *);
void get_bunch_name (int, char [25]);
struct surface *contour_polyhedron (struct msscene *, double);
struct surface *polyhedron_normals (struct msscene *, double);
struct surface *polyhedron_tangents (struct surface *, double, int);
struct surface *polyhedron_oringes (struct oringe *, double, int);
struct surface *surf_input (FILE *);
struct surface *read_phn_surface (FILE *);
void write_pixels (struct msscene *);
void write_image (struct msscene *);
void write_image_header (struct msscene *);
void write_color_table (struct msscene *);
void start_plot (struct msscene *);
long plot_bunch (struct msscene *, struct surface *);
void print_rgb (struct msscene *, double, double, double);
void output_linewidth (struct msscene *, double);
void output_linseg (struct msscene *, struct linseg *);
void terminate_plot (struct msscene *);
void write_plot (struct msscene *);
void set_rgb (struct msscene *, double, double, double);
void set_linewidth (struct msscene *, double);
void setup_linewidth ( struct surface *, double, double, double, double);
void create_saddles(struct surface *);
void free_saddle(struct surface *, struct torus *);
void newsad(struct surface *, struct arc *, struct arc *, struct circle *, struct circle *, struct torus *, double);
void regular_saddle(struct surface *, struct torus *);
void setup_torus_arcs(double[3], int, struct arc **, double[][3], short[]);
struct circle *new_contact_circle(struct surface *, struct torus *, int);
void new_concave_face(struct surface *, struct probe *prb);
void create_convex(struct surface *);


void set_region_radius (int, double);
void get_region_center (int, double [3]);
void set_region_center (int, double [3]);
void get_region_direction (int, double [3]);
void set_region_direction (int, double [3]);
void define_region (char *, int, int);
int region_size ();
double get_region_radius (int);
struct region *region_ptr (int);
void init_region ();


void arbprp (double [3], double [3]);
void cross (double [3], double [3], double [3]);
void setup_axis (double [3], double [3], double [3], double [3]);
void reverse (double [3]);
void make_matrix (double, double [3][3]);
void trvec (double [3][3], double [3]);
void trpnt (double [3][3], double [3], double [3], double [3]);
int pclipped (double [3], double [3], double [3]);
int normalize (double [3]);
int generate_rotation (double [3], double, double [3][3]);
int negdot (double [3], double [3]);
int lines_intersect (double [2], double [2], double [2], double [2]);
int pit (double [2], int, double [2], double [2], double [2]);
int piq (double [2], int, double [2], double [2], double [2], double [2]);
double probe_volume ();
double norm_squared (double [3]);
double norm(double [3]);
double dot_product (double [3], double [3]);
double distance_squared (double [3], double [3]);
double distance (double [3], double [3]);
double triple_product (double [3], double [3], double [3]);
double triangle_area (double [3], double [3], double [3]);
double signed_triangle_area (double [3], double [3], double [3], double [3]);
double tetrahedron_volume (double [3], double [3], double [3], double [3]);
double tetra_solid (double [3], double [3], double [3], double [3]);
double tetra_solid_angle (double [3], double [3], double [3], double [3]);
double simple_angle (double [3], double [3]);
double positive_angle (double [3], double [3], double [3]);
double odd_angle (double [3], double [3], double [3], double);
double quad_angle (double [3], double [3], double [3], double [3]);
double do_axis (double [3][3], double [3]);
double line_intersection (double [2], double [2], double [2], double [2]);
double triple_angle (double [3], double [3], double [3]);
double tetra_solid_angle (double [3], double [3], double [3], double [3]);
double zclipped (double [3], double [3], double [3]);

short *allocate_object (int);
short *allocate_named_object (int, int, int);
int free_object (int, short *);
int free_named_object (int, short *, int, int);
short *get_cache (int);
int put_cache (int, short *);
int free_cache (int);
int init_mem (int);
int define_type (int, unsigned long, char *);
int get_type_name (int, char [MAX_TYPE_NAME]);
int copy_bytes (char *,  char *, unsigned long);
int get_arguments ();
void setup_default_name(char *, char[]);

struct msscene *new_msscene (void);

void init_zbuffer (struct msscene *);
struct depth_buffer *allocate_buffer (struct msscene *, int);
void merge_buffers (struct msscene *);
struct leaf *allocate_leaf ();
void frearc (struct arc *);
void free_leaf (struct leaf *);
void clear_phn (struct surface *);
void free_buffers (struct msscene *);
void free_buffer (struct depth_buffer *);

struct linseg *allocate_linseg ();
void free_linseg (struct linseg *);

struct surface *new_surface ();
struct chunk *allocate_chunk(void);
struct component *allocate_component(void);
struct component *get_component_ptr(struct surface *, int);
struct face *new_face (struct variety *, int);
int link_face (struct surface *, struct face *);
int add2face (struct face *, struct arc *, struct arc *, struct arc *, struct arc *);
struct face *duplicate_face (struct face *);
struct solid_angle *new_solid_angle (struct variety *);
void add2solid (struct solid_angle *, struct face *);
void free_solid_angle (struct solid_angle *);
struct cycle *allocate_cycle ();
struct cycle *new_cycle(struct face *, struct edge *);
void ink_cycle(struct surface *);
void delete_cycle(struct surface *, struct face *, struct cycle *);
struct vertex *new_vertex (double [3], struct sphere *, struct probe *, struct arc *, struct face *);
int link_vertex (struct surface *, struct vertex *);
struct probe *new_probe(struct surface *, double[3], double, double[3], int, struct sphere *, struct sphere *, struct sphere *, struct pair *, struct pair *, struct pair *);
void create_convex(struct surface *);
void link_probe (struct surface *, struct probe *);
struct circle *allocate_circle ();
struct circle *new_circle(double[3], double, double[3]);
void store_circle (struct circle *, double [3], double, double [3]);
int link_circle (struct surface *, struct circle *);
int link_sa_circle (struct solid_angle *, struct circle *);
struct arc *new_arc (struct circle *, struct vertex *, struct vertex *, int, int, double, long, long, long);
void link_arc (struct surface *, struct arc *);
void store_arc(struct circle *, int, struct vertex *, struct vertex *, struct arc *);
struct edge *allocate_edge ();
struct edge *new_edge(struct arc *, int, struct face *, struct cusp *);
int link_sa_edge (struct solid_angle *, struct edge *);
struct central *new_central(double[3], double, double[3]);
void link_central (struct surface *, struct central *);
struct cusp *allocate_cusp(void);
struct cusp_link *allocate_cusp_link(void);
struct cusp_extension *allocate_cusp_extension ();
struct arc *allocate_arc ();
struct vertex *allocate_vertex ();
struct variety *allocate_variety ();
struct torus *allocate_torus ();
struct face *allocate_face ();
void free_vertex(struct vertex *);
void free_circle(struct circle *);
void free_torus(struct torus *);
void free_central (struct central *);
void free_probe(struct probe *);
void free_arc(struct arc *);
void free_face(struct face *);
void deep_free_face (struct face *);
int free_cycle(struct cycle *);
void free_edge(struct edge *);
void free_cusp(struct cusp *);
void free_cusp_edges (struct cusp *);
void free_cusp_link(struct cusp_link *);
void free_cusp_extension (struct cusp_extension *);
void free_chunk(struct chunk *);
void free_component(struct component *);
void clear_pqms (struct surface *);
void free_surface(struct surface *);
void free_scene (struct msscene *);
void free_chunks(struct surface *);
void free_components(struct surface *);
void free_cusps(struct surface *);
void free_prbdot(struct surface *);
void free_varieties(struct surface *);
void free_probes(struct surface *);
void free_tori(struct surface *);
void free_vertices(struct surface *);
void free_circles(struct surface *);
void free_sa_circles(struct solid_angle *);
void free_sa_faces (struct solid_angle *);
void free_faces(struct surface *);
void free_cycles(struct surface *);
void free_ae(struct surface *);
void free_variety (struct variety *);
void count_problem_faces (struct surface *);
void free_variety_handles (struct surface *);
void free_vertex_handles (struct surface *);
void free_circle_handles (struct surface *);
void free_face_handles (struct surface *);
void free_arc_handles (struct surface *);
void free_edge_handles (struct surface *);
void free_cycle_handles (struct surface *);

void free_sgrid (struct spheregrid *);
void free_cgrid (struct spheregrid *);
void free_snumber (struct spheregrid *, struct snumber *);
void free_cube (struct spheregrid *, struct scube *);
void free_bgrid (struct spheregrid *);
void add_spheres (struct spheregrid *);
void add_sphere(struct spheregrid *, double [3], double);
void bit_floor (struct spheregrid *, double [3], int [3], int);
void bit_ceiling (struct spheregrid *, double [3], int [3], int);
struct spheregrid *init_sgrid (long, double *, double *);
int init_cgrid (struct spheregrid *, double);
int add_sphere_to_grid (struct spheregrid *, long);
int add_sphere_to_cube (struct spheregrid *, long, int [3]);
int cube_in_sphere (double [3], double, double [3], double);
int indices_to_center (struct spheregrid *, int [3], double [3]);
int point_to_indices (struct spheregrid *, double [3], int [3]);
int sphere_to_indices (struct spheregrid *, long, int [2][3]);
int sphere_inquiry (struct spheregrid *, long, int, long []);
int box_inquiry (struct spheregrid *, int [2][3], int, long []);
int cube_inquiry (struct spheregrid *, int [3], int, long []);
int init_bgrid (struct spheregrid *, double);
int point_inquiry (struct spheregrid *, double [3]);
struct scube *get_scube_ptr (struct spheregrid *, int [3]);
struct snumber *new_snumber (struct spheregrid *);
void setup_squares (struct msscene *);
void free_squares (struct msscene *);
void store_square (struct msscene *, struct square *);
void create_linsegs (struct msscene *);
void bunch_linsegs (struct surface *);
int edge_to_linseg (struct surface *, struct phnedg *);
void make_linseg (struct surface *, double [2][2], double [2], int, int, int, double, struct phnedg *);
long count_linseg (struct linseg *);
void mark_molecules (struct msscene *);
void mark_bunch (struct surface *);
void hle_bunch (struct msscene *, struct surface *);
void back_face_bunch (struct msscene *, struct surface *);
void cut_bunch (struct msscene *, struct surface *);
void cut_ls (struct surface *, struct linseg *, struct phnedg *);
void put_bunch (struct msscene *, struct surface *);
int setup_square (struct msscene *, struct square *);
int fetch_square (struct msscene *, double [3]);
int under_square (struct msscene *, double [3], struct polygon *, struct polygon *);
int put (double [3], struct polygon *);
struct surface *polyhedron_bunch (struct molecule *);
int quick (struct cycle *, double [3], double);
int point_in_face (double [3], struct face *, int);
int cycle_contain_point (struct cycle *, double [3], double [3], double, double, int, int);

int write_header_iv (struct msscene *, FILE *);
int write_tri_iv (struct msscene *, struct surface *, FILE *, struct color_ramp *);
int write_edg_iv (struct msscene *, struct surface *, FILE *);
int write_ctr_iv (struct msscene *, struct surface *, FILE *);
int write_phn_iv (struct msscene *, struct surface *, FILE *);
int write_den_iv (struct msscene *, struct surface *, double, FILE *);
int write_pgn_iv (struct msscene *, struct surface *, long, int, FILE *);
int write_arc_iv (struct msscene *, struct surface *, FILE *, long);
int write_one_arc (struct msscene *, double [100][3], long, long, FILE *);
int write_mol_iv (struct msscene *, struct molecule *, FILE *);
long material_phn_vtx(struct surface *);
long material_phn_tri (struct surface *);
long material_phn_pgn(struct surface *);
long material_den_pgn(struct surface *, double);

void cut_leaf (struct msscene *, struct surface *, double, struct leaf *);
int clipped (struct msscene *, double [3]);
void clip_leaf (struct msscene *, struct surface *, double, struct leaf *);
void render_leaf (struct msscene *, struct surface *, double, struct leaf *);
int subdivide_leaf (double, struct leaf *, double **);
struct arc *leaf_to_arc (struct leaf *);
struct leaf *duplicate_leaf (struct leaf *);
void sort_nbrs (long, double [][3], double [], long [], long []);
int tuber (double, int, double [3], double [][3], double [], double [3], double [3], double [2], double [2][3], double [2]);
void render_surface (struct msscene *, struct surface *);

unsigned long atom_size(void);
unsigned long bond_size(void);
void get_bond_atoms(int, int[2]);
void set_bond_atoms(int, int[2]);
void set_atom(int, int, int, double[3], double, char[MAX_ATNAME], char[MAX_ATNAME], char[MAX_ATNAME]);
struct atom *atom_ptr(int);
struct bond *bond_ptr(int);
void init_mol(void);
void make_bonds(int, int);
double atom_distance(int, int);

struct molecule *new_molecule (long, long, struct atom *, struct atom *);
struct array *read_atoms (long);
void setup_ball_radii (double, int);
void init_pdb ();
void init_patterns();
void init_radii ();
void add_bond (int, int);
void delete_bond (int, int);
int parse_disconnect (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int select_bonds (int);
int lookup_bond (int, int);
int lookup_region (char *);
void chooser (int, int, char *, char *, char *);
void atom_field (int, int, char *, char *);
void residue_field (int, int, char *, char *);
void sequence_field (int, int, char *, char *);
void subunit_field (int, int, char *, char *);
void suffix_field (int, int, char *, char *);
void pdb_field (int, int, char *, char *);
void kind_field (int, int, char *, char *);
int string_relation (char *, char *, char *);
void center_field (int, int, char *, char *);
int space_relation (char *, double [3], double [3], double, double [3]);
void occupancy_field (int, int, char *, char *);
void tfactor_field (int, int, char *, char *);
void element_field (int, int, char *, char *);
void anumber_field (int, int, char *, char *);
void rnumber_field (int, int, char *, char *);
void molecule_field (int, int, char *, char *);
void field_assignment (char *, char *, char *);


void one_field (int, char *, char *);
int real_relation (char *, double, double);
int integer_relation (char *, int, int);
int read_atom_file(struct array *, char *, char *);
int read_radii_file(struct array *);
int read_pattern_file(struct array *);
int pattern_match (char [6], char [6]);
int interpret_pdb (char [100], char [6], char [6], char [6], char [6], char [6], char [6], char [10], char [10], char [10], char [8], char [8]);
int interpret_xyzr (char [100], char [10], char [10], char [10], char [6], char [6], char [6], char [6]);
int interpret_ms (char [100], char [10], char [10], char [10], char [6], char [6], char [6], char [6], char [6], char [6]);
int interpret_ds (char [100], char [10], char [10], char [10], char [6], char [6], char [6], char [6], char [6], char [6], char [6]);
struct array *write_file (char *, char *);
struct array *write_radii ();
void clear_command (char *);
void assignment (char *, char *, char *, char *);
void times_equals (char *, char *, char *, char *);
void plus_equals (char *, char *, char *, char *);
void minus_equals (char *, char *, char *, char *);
void handle_intersection (char *, char *, char *);
void handle_union (char *, char *, char *);
void handle_subtraction (char *, char *, char *);
void simple_set_copy (char *, char *);
int named_set (char *, int);
int lookup_set (char *);
int count_command (char *);
int protected_set(char *);
void null_terminate (char *, char);
void type_field (int, int, char *, char *);

void sphere_command(char *, float, float, float, float);
void plane_command(char *, float, float, float, float, float, float);
void remove_tb(char *);
void remove_lb(char *);
void help_scanner(char[100]);
int isoperator(char);
int parse_sphere (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_plane (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_clear (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int pdb_command(char[MAXLINE]);
void read_atom_commands (struct msscene *, FILE *);

long remove_duplicate_atoms (int);

struct surface *polyhedron_to_density(struct surface *, double);
void putpix (struct msscene *, struct surface *, int, int, int, double, int, int, int);
int closest (struct surface *, struct leaf *, double [3]);
int ftoi (struct msscene *, double, int);
double itof (struct msscene *, int, int);
int detsh (struct msscene *, double [3], int);

struct msdata *doPlex(long, long[3], double[2][3], long, long, long, double *, long *, long *);
int setOccupancies (struct Plex *, struct vanity *);
int defineGrid (struct Plex *);
int initializePlex(struct Plex *);
int initializeGlass(struct Plex *);
int moreGlass(struct Plex *);
struct Glass *allocateGlass(struct Plex *);
int computeVolume (struct Plex *);
struct msdata *transferdata ();
long transfertype (struct Plex *, enum PlexType type, float *, long);
int freePlex(struct Plex *);
int typeDim(enum PlexType);
long hashGlass(long[4], long);
int idmatch(enum PlexType, long[4], long[4]);
struct Glass *storeGlass(struct Plex *, enum PlexType, long[4], double[3], double);
struct Glass *lookupGlass(struct Plex *, enum PlexType, long[4]);
int storePoly(struct Plex *);
int storePolyBefore (struct Plex *);
int storePolyAfter (struct Plex *);
int cutPoly2 (struct Plex *);
int cutPoly3(struct Plex *);
int initEST (struct Plex *);
int initPST (struct Plex *);
long finishST (struct Plex *);
long finishPST (struct Plex *, struct subpolygon *);
int bisectPolygon (struct subpolygon *, int, int);
int cutST (struct Plex *);
int onePlane (struct Plex *, double [3], double [3]);
int cutPE (struct Plex *, struct subpolygon *, double [3], double [3]);
int cutEST (struct Plex *, struct subedge *, double [3], double [3]);
int cutPST (struct Plex *, struct subpolygon *, double [3], double [3]);
int cutsubedge (struct Plex *, struct subedge *, double [3], double [3]);
int bisectEdge (struct Plex *, struct subedge *, double [3]);
int cutsubpolygon (struct subpolygon *);
long finishPolygon (struct Plex *, struct subpolygon *);
long makeVertex(struct Plex *, enum PlexType, double[3]);
long makeDenVertex (struct Plex *, long, long, long);
int fetchST (struct Plex *);
long fetchSubEdges (struct Plex *);
long fetchSubPolygons (struct Plex *);
long fetchETree (struct Plex *, struct subedge *);
long fetchPTree (struct Plex *, struct subpolygon *);
long fetchPETree (struct Plex *, struct subpolygon *);
int freeST (struct Plex *);
long freeSubEdges (struct Plex *);
long freeSubPolygons (struct Plex *);
long freeETree (struct Plex *, struct subedge *);
long freePTree (struct Plex *, struct subpolygon *);
long freePETree (struct Plex *, struct subpolygon *);
int classifyCubes(struct Plex *);
int markSurfaceCubes(struct Plex *);
int markOneType(struct Plex *, struct Plexi *);
int markOne(struct Plex *, struct Glass *);
int markCubeType(struct Plex *, long[3], enum CubeType);
int center2indices(struct Plex *, double[3], long[3]);
int indices2center(struct Plex *, long[3], double[3], int);
int connectCubes(struct Plex *);
int joinCubes(struct PlexCube *, struct PlexCube *);
struct PlexCube *cubeRoot(struct PlexCube *);
int numberRoots(struct Plex *);
int numberCubes(struct Plex *);
int inoroutCubes(struct Plex *);
int insidePoly (struct Plex *, double [3]);
int insidePolygon (struct Plex *, double [3]);
int insidePolyhedron (struct Plex *, double [3]);
int createProvinces(struct Plex *);
long makeProvince(struct Plex *, long[3]);
struct Glass *addSquare(struct Plex *, long, long, long, long, long, long, long, long, long, long, long, long);
long loraDenVertex(struct Plex *, long, long, long);
struct Glass *loraDenEdge(struct Plex *, long, long);
struct Glass *loraDenSquare(struct Plex *, long, long, long, long);
int polyhedronProvince(struct Plex *);
int triangleProvince(struct Plex *);
int edgeProvince(struct Plex *);
int vertexProvince(struct Plex *);
int vertexProvince0(struct Plex *, enum PlexType);
int vertexProvince1(struct Plex *, enum PlexType);
int vertexProvince2(struct Plex *, enum PlexType);
int addLink(struct Plex *, long, long, long, long);
int sortLink(struct PlexVertex *, struct Glass *);
int densityProvince(struct Plex *);
int densityProvince2(struct Plex *);
int densityProvince3(struct Plex *);
int createBorderVertices (struct Plex *);
int createBorderEdges (struct Plex *);
int createBorderTriangles (struct Plex *);
long makeBorderVertex (struct Plex *, long, long, long, long, long, long, long, long, long, long, long);
struct Glass *makeBorderEdge (struct Plex *, long, long, long, long, long, long);
struct Glass *makeBorderTriangle (struct Plex *, long, long, long, long, long, enum PlexType subtype);
long collectBorderVertices (struct Plex *, long vertices[], long, long, long, long);
int sortBorderVertices (struct Plex *, double [3], long, long vertices[]);
int processBorderVertices (struct Plex *, long, long vns[], long, long, long, long);
long collectBorderEdges (struct Plex *, struct Glass *[], int [], enum PlexType [], long, long, double [3], double [3]);
int groupBorderEdges (struct Plex *, long, struct Glass *[], int [], enum PlexType []);
int processBorderEdges (struct Plex *, long, struct Glass *[], int [], enum PlexType [], long, long);
int allApices (struct Plex *);
int setApices (struct Plex *, enum PlexType, int);
int provinceCenter(struct Plex *);
int computeJoins(struct Plex *);
int joinType(struct Plex *, enum PlexType);
int makeJoin (struct Plex *, int, long [4], long, enum PlexType, enum PlexType);
int do_fraction (struct Plex *, struct PlexEdge *, double [2], double [2], double [2], double [2]);
int computeSurfaceDensity (struct Plex *);

struct msdata *doXelp(long, long[3], double[2][3], double, struct vanity *);
int identifyContourCubes(struct Plex *);
int createCubeVertices(struct Plex *);
int createCubeTetrahedra(struct Plex *);
int createCubeTriangles(struct Plex *);
int createCubeEdges(struct Plex *);
int createContourVertices(struct Plex *);
int createContourEdges(struct Plex *);
int createContourTriangles(struct Plex *);
struct msdata *transferContour(struct Plex *);
struct Glass *makeCubeEdge (struct Plex *, long, long);
struct Glass *makeCubeTriangle (struct Plex *, long, long, long);
struct Glass *makeCubeTetrahedron (struct Plex *, long, long, long, long);
long makeContourVertex(struct Plex *, double [3]);
struct Glass *makeContourEdge (struct Plex *, long, long);
struct Glass *makeContourTriangle (struct Plex *, long, long, long);
struct vanity *smooth_density (long, long dimensions[3], float *, float radius, float width, int);
struct msdata *eval_density (long, long dimensions[3], double *, double *, double *, long, float *, float radius, float width, int, long);
int add_edge (struct Plex *, long, long);
int computeBoundary (struct Plex *);


int convert_vet(struct surface *);
int convert_face(struct surface *, struct face *);
int convert_vertex(struct surface *, struct vertex *);
int convert_edge(struct surface *, struct arc *);
int convert_triangle(struct surface *, struct face *);
void get_tri_center (struct vertex *[3], double [3], int);
void get_di_center (struct vertex *[2], double [3]);
double get_normal (struct vertex *[3], double [3]);
int point_choice (struct surface *, double [3], struct variety *, int);
int polyhedron_handles (struct surface *);
int vectorize_density (struct msscene *, struct surface *, double, char *);
int polygonize_density(struct surface *, double);
long collect_den_vtx1(struct surface *, struct denvtx *, long);
long collect_den_pgn(struct surface *, struct denvtx *, double);
int polygonize_polyhedron(struct surface *);
long collect_phn_pgn(struct surface *);

int init_edger (struct surface *);
struct edger *new_edger (struct surface *, long, long);
struct edger *insert_edger (struct surface *, struct edger *, long, long);
long lookup_edger (struct surface *, long, long);
long convert_edger (struct surface *);
int recurse_edger (struct surface *, struct edger *);
long collect_edges (struct surface *);
void setup_triangles (struct surface *);

void do_pgn_bound (struct polygon *);
void free_phnvtx (struct phnvtx *);
void free_phnedg (struct phnedg *);
void free_polygon (struct polygon *);
void do_pgn_axis (struct polygon *);
int free_phn (struct surface *);
void cleanup_phn (struct surface *);
struct surface *init_phn (long, long, long);
struct surface *filter_phn (struct surface *);
int value2material (struct object_scheme *, double);
long id_critical (struct surface *);
void set_opposite (struct surface *);
void set_link (struct surface *);
void add_link (struct phnvtx *, struct phnedg *, int);
void id_crits (struct surface *);
void id_crit (struct phnvtx *, struct surface *);
int count_changes (int, double []);
double average (int, double []);
int make_phn_simple (struct surface *);
int free_phn_simple (struct surface *);
struct phnctr *allocate_phnctr ();
struct phnvtx *allocate_phnvtx ();
struct phnedg *allocate_phnedg ();
struct phntri *allocate_phntri ();
void free_phntri (struct phntri *);
struct polygon *allocate_polygon ();
int do_axes (struct surface *);
long phnvtx_size ();
long phnedg_size ();
long phntri_size ();
void do_bounds (struct surface *);
long identify (struct surface *);
struct phnvtx *num2phnvtx (struct surface *, long);
struct phnedg *num2phnedg (struct surface *, long);
struct phntri *num2phntri (struct surface *, long);
struct polygon *num2polygon (struct surface *, long);
void do_polyhedron_bounds (struct surface *);
int do_poly_bounds (struct surface *);
int link_polyhedron (struct surface *);
int measure_polyhedron(struct surface *);

struct surface *read_outer (FILE *);
struct surface *read_polyhedron (FILE *);
struct surface *read_vet (FILE *);
int write_vet (struct surface *, FILE *);
int write_whatif (struct surface *, FILE *);
void write_O (struct surface *, FILE *, int, char *);
int write_Os (struct surface *, FILE *, char *);
int write_phnorg (struct surface *, double, long, FILE *);

int cvt_surface(struct surface *, double[3]);
void cvt_header(struct surface *);
struct variety **cvt_varieties(struct surface *, double[3]);
struct vertex **cvt_vertices(struct surface *);
struct circle **cvt_circles(struct surface *);
struct arc **cvt_arcs(struct surface *);
struct face **cvt_faces(struct surface *, long *);
struct cycle **cvt_cycles(struct surface *, short *, long *);
struct edge **cvt_edges(struct surface *, short *);
int cvt_components(struct surface *);
struct surface *read_surface (FILE *, char [64], double [3]);
int write_surface (struct surface *, FILE *);
void write_header (struct surface *, char *, FILE *);
void write_varieties (struct surface *, FILE *);
void write_vertices (struct surface *, FILE *);
void write_circles (struct surface *, FILE *);
void write_arcs (struct surface *, FILE *);
void write_faces (struct surface *, FILE *);
void write_cycles (struct surface *, FILE *);

void write_edges (struct surface *, FILE *);
void write_components (struct surface *, FILE *);
struct surface *read_header (FILE *, char [64]);
struct variety **read_varieties (FILE *, struct surface *, double [3]);
struct vertex **read_vertices (FILE *, struct surface *);
struct circle **read_circles (FILE *, struct surface *);
struct arc **read_arcs (FILE *, struct surface *, struct circle **, struct vertex **);
struct face **read_faces (FILE *, struct surface *, long *, struct variety **);
struct cycle **read_cycles (FILE *, struct surface *, short *, long *);
struct edge **read_edges (FILE *, struct surface *, short *, struct arc **);
struct component **read_components (FILE *, struct surface *);


void render_polyhedron (struct msscene *, struct surface *, double, long);
void render_triangle (struct msscene *, struct surface *, double, long, double [3], double, double [3][3], double [4][3],
	double [3], int check, int comp, int trihue, int);
void probe_rolling(struct surface *);
void setup_sgrid(struct surface *);
void create_neighbors(struct surface *);
void create_probes(struct surface *);
int place_probe (struct surface *, struct mutual *, struct mutual *, 
    struct sphere *, struct sphere *, struct sphere *, 
    struct pair *, struct pair *, struct pair *);
int check_collision (struct surface *, double [3], struct mutual *, struct mutual *, struct sphere *);
void create_concave_faces (struct surface *);
void mark_not_buried(struct surface *);
void free_nbr(struct surface *);
int are_neighbors(struct surface *, struct sphere *, struct sphere *);
int form_mutual_list(struct sphere *, struct sphere *, struct mutual *);
void initialize_surface(struct surface *);
void calculate_surface(struct surface *);
void finish_up(struct surface *);
void count_edges(struct surface *);
void count_problem_faces2(struct surface *);
void number_arcs(struct surface *);
void clean_circles(struct surface *);

void roll_mem ();
void draw_mem ();
void form_mem ();
void tran_mem ();
int triangulate (struct msscene *);
void read_draw_commands (struct msscene *, FILE *);
int parse_shading_model(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_light_source(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_elbow(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_molecule(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_tolerance (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_connect (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_rotation(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_surface(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_ball_and_stick(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_read_polyhedron(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_blank(struct msscene *);
int parse_contour(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_normals(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_no_clipping(struct msscene *);
int parse_solid_shade (struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_overlap_color (struct msscene *, int , char [MAX_WORD][MAX_NAME]);
int parse_surface_thickness (struct msscene *, int , char [MAX_WORD][MAX_NAME]);
int parse_atom_coloring(struct msscene *);
int parse_uniform_coloring(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_shape_coloring(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_component_coloring(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_input_coloring(struct msscene *);
int parse_input_opacity (struct msscene *);
int parse_atom_opacity(struct msscene *);
int parse_uniform_opacity(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_shape_opacity(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_component_opacity(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_bond_radius (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_ball_radius (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_outer_line_width(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_inner_line_width(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_cavity_line_width(struct msscene *, int, char[MAX_WORD][MAX_NAME]);
int parse_bond_line_width(struct msscene *, int, char[MAX_WORD][MAX_NAME]);

void define_simple ();
long boolean_size ();
long integer_size ();
long real_size ();
long string_size ();
int is_true (int);
int is_false (int);
int integer_is (int);
double real_is (int);
char *string_is (int);
struct boolean *boolean_ptr (int);
struct integer *integer_ptr (int);
struct real *real_ptr (int);
struct string *string_ptr (int);
int psl_init();
int error ();
void set_fatal ();
void set_error1 (char *);
void set_error2 (char *);
void print_error ();
void define_set ();
void init_scratch (int);
void delete_range ();
void pseudo_set_complement ();
void delete_range (struct range *);
void include_member (int, int, int);
void exclude_member (int, int, int);
void set_complement (int, int);
void pseudo_set_complement (int, int);
void set_union (int, int, int);
void set_intersection (int, int, int);
void set_subtraction (int, int, int);
void set_difference (int, int, int);
void clear_set (int);
void clear_for (int);
int init_for (int);
void consolidate (int);
int get_first_member (int);
int get_last_member (int);
int range_size ();
int set_size ();
int set_comparison (int, int, int);
int member_of (int, int);
int next_for (int);
int set_comparison ();
int count_set (int);
void set_set_type (int, int);
struct range *make_range (int, int);
struct set *set_ptr (int);
void allocate_headers ();
void init_object (int, unsigned long);
void memory_init (int);
void free_element (struct element *);
void get_object_type_name (int, char [MAX_NAME]);
void get_class_name (int, char [MAX_NAME]);
int allocate_psl (int);
int some_free (int);
int allocate_set (int);
int last_of_objects (int);
int type_deletable (int);
int number_of_all_objects ();
int number_of_object_types ();
int number_of_objects (int);
int first_object (int);
int object_exists (int, int);
int copy_object ();
int integer_is ();
int simple_type ();
int object_number_of ();
int named(int);
struct generic *generic_ptr (int, int);
struct generic *named_ptr (int, int);
struct element *new_element ();
void define_symbol ();
void change_owner (int, int, int);
void link_and_set (int, int,int);
void define_real (char *, double);
int null_eol (char *);
int null_char (char *, char);
int object_number_of (char *);
int new_symbol (char *, int, int);
int new_object_symbol (char *, int);
int lookup_symbol (char *);
int allocate_named (int, int);
long symbol_size ();
struct symbol *symbol_ptr (int);
void define_mol ();
void define_region_type ();
void define_geometry ();
void slice_sphere (struct msscene *, struct surface *, double, struct face *);
void slice_torus (struct msscene *, struct surface *, double, double, struct face *);
void slice_elbow (struct msscene *, struct surface *, double, struct face *);
void slice_cylinder (struct msscene *, struct surface *, double, struct face *);
int along (struct edge *, double [3]);
int polyhedron_in_sphere (struct surface *, struct variety *);
void set_omega_radii (struct surface *, double, double, double);
void do_evaluation (struct surface *, struct surface *, struct surface *, int);
int one_evaluation (struct evalpnt *, struct surface *, int, int);
void mark_maybe (struct surface *, struct variety *);
int compute_solid (struct surface *, struct solid_angle *);
int sphere_edge (struct solid_angle *, struct variety *, struct phnedg *);
int sphere_plane (struct solid_angle *, struct variety *, struct phntri *);
int sphere_triangle (struct solid_angle *, struct phntri *);
struct solid_angle *sphere_polyhedron (struct surface *, struct variety *);
void sort_faces (struct surface *);
void one_Shell (struct surface *, long);
void swap_faces (struct face *, struct face *);
int compare_faces (struct face *, struct face *);
void initialize_lfn (struct surface *);
void iterate_lfn (struct surface *);
int original_lfn (struct surface *);
int original_face_number (struct surface *);
int setup_ffn (struct surface *);
int purge_surface (struct surface *, long);
int ds_stream (struct msscene *, int, FILE *, FILE *, FILE *, double, int);
struct surface *ds_normals (struct dsdesc  *, double);
int pqms_stream(struct msscene *, struct molecule *, FILE *, FILE *, FILE *, FILE *, double, double, int,  char *, double [3]);
int trb_stream (struct msscene *, FILE *, FILE *, FILE *, struct molecule *);
int omega_stream (struct msscene *, FILE *, FILE *, FILE *, FILE *, FILE *, char *, double, double);
int density_stream (struct msscene *, FILE *, FILE *, FILE *, FILE *, FILE *, FILE *, char *, double, double, double, int, long);
int msorange (struct msscene *, FILE *, FILE *, FILE *, FILE *, FILE *);
int fundamental (int);
struct oringe *allocate_oringe ();
struct record *allocate_record ();
struct oringe *read_oringe (FILE *);
int write_oringe (struct oringe *, FILE *, char *, char *);
struct polygon *read_polygon (FILE *);
struct token *get_token (FILE *);
int lookup_alpha (struct token *);
struct record *get_record (short expected_type, FILE *);
struct token *allocate_token ();
void free_token (struct token *);
void free_record (struct record *);
void deep_free_record (struct record *);
int compute_orange_density (struct surface *, struct surface *, struct oringe *);
int compute_orange_frame (struct surface *, struct oringe *);
int compute_sector_densities (struct surface *, struct oringe *);
float *set_orange_values (struct oringe *, struct surface *);
void store_orange_values (float *, struct oringe *, struct surface *);
void rotate_polyhedron (struct oringe *, struct surface *);
int msden(struct msscene *, FILE *, FILE *, FILE *, double, char *);
void set_atom_hues(struct msscene *, struct molecule *, struct surface *);
void set_atom_opacities(struct molecule *, struct surface *);
void setup_color_table (struct msscene *);
int determine_hue (struct material_table *, struct object_scheme *, int, int, int, int, int, double);
int opaque (int, int, double);
double detopac (int, int, int, int, struct object_scheme *, double);
struct object_scheme *define_scheme (int, int, int, double, double);
struct object_scheme *allocate_object_scheme ();
void get_format_name (int, char []);
int get_format_number(char *);
int get_color_number (struct material_table *, char *);
void name_to_rgb (struct material_table *, char *, double *, double *, double *);
void number_to_rgb (struct material_table *, int, double *, double *, double *);
double get_opacity_number (char *);

double numerical_omega (struct surface *, struct variety *);
double compute_omega (double, struct face *);
int point_in_polyhedron (struct surface *, double [3]);
int point_in_triangle (double [3], struct phntri *);
double polyhedron_subtends (struct surface *, double [3]);

int is_saddle_cone(struct face *);
struct vertex *find_cone_vertex(struct face *);
int do_saddle_cone(struct face *);
int fac_centroid(struct face *, double[3]);
int cyc_centroid(struct cycle *, double[3]);
int multiple_tent(struct face *);
int simple_tent(struct face *, int);
int tent(struct face *, struct vertex *);
int cycle_tent(struct face *, struct cycle *, struct vertex *, int);
void create_centrals(struct surface *);
void create_tori(struct surface *);
void create_permanent(struct surface *);
void free_centrals(struct surface *);
void free_pairs(struct surface *);
void compute_torus_center(double, struct sphere *, struct sphere *, double[3]);
void setup_torus_fields(double, struct pair *, double[3], double *, double[3]);


int ds (struct dsdesc *);

int compute_volume(struct surface *);
int compute_old_volume(struct surface *);
void convex_face_area(struct face *);
void saddle_face_area(struct face *);
void concave_face_area(struct face *);
int check_omega(struct face *, double);
void print_face (struct face *);
void compute_old_area(struct surface *);
void makdot(struct surface *);
void convex_piece_volume(struct face *);
void saddle_piece_volume(struct face *);
double probe_volume(struct probe *);
double cusp_cone_volume(struct probe *, struct cusp *, int, struct edge *[MAX_POLY_EDGE]);
double hedron(struct surface *);
void face_volume(struct face *);
void polygon_center(struct polygon *);
void polygon_area(struct polygon *);
double segment_area(struct arc *);
double sector_area(struct arc *);
double cone_volume(double[3], struct polygon *);
double join_volume(double[3], double[3], struct edge *);

int oringe_stream (long, long, long, long, FILE *, FILE *, FILE *, FILE *, char *, int);
int standard_to_fourier (struct oringe *, double);
int standard_to_abstract (struct oringe *, long, long, char *);
int fourier_to_standard (struct oringe *);
int allocate_standard (struct oringe *, long);
int allocate_fourier (struct oringe *, long);
int digitize_fourier (long, struct term *[], long, long *, char *);
long digitize_one (double, double, long, long, char *);
unsigned long pack_one (long, long *);
void unpack_one (long, unsigned long, long digitized[]);
int insert_bar (struct oringe *, unsigned long, double);
void pre_non_axial (struct surface *, struct face *, long);
void axial_cusp (struct surface *);
long non_axial_cusp (struct surface *, long);
int one_edge_edge (struct surface *, struct face *, struct edge *, struct edge *, int);
struct material_table *new_material_table (struct msscene *);
struct color_ramp *define_ramp (struct msscene *, long, long colors[], char *);
struct color_ramp *lookup_ramp (struct msscene *, char *);
int write_material_iv (struct material_table *, FILE *, int);
int mspol (struct msscene *, FILE *, FILE *, FILE *, char *, double, double, int);
int mspol2 (struct msscene *, FILE *, FILE *, FILE *, FILE *, char *, double, double, int);
int mspolden (struct msscene *, FILE *, FILE *, FILE *, FILE *, double, long, int);
int mspolden2 (struct msscene *, FILE *, FILE *, FILE *, FILE *, FILE *, double, long);
int hsa2value (struct material_table *, int, int, int);
int hsa2red (struct material_table *, int, int, int);
int hsa2green (struct material_table *, int, int, int);
int hsa2blue (struct material_table *, int, int, int);
int add_material (struct material_table *, double, double, double, char *);
int parse_define_color (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
int parse_define_ramp (struct msscene *, int, char [MAX_WORD][MAX_NAME]);
struct color_ramp *create_ramp (struct msscene *, long, long [], long [], char *);
int create_part (struct material_table *, long, long, long, long some []);
int code_color (double, double, double, char [MAX_NAME]);
int rgb_to_color_number (struct material_table *, double, double, double);
double rgb_to_wheel (double, double, double);
void redo_handles (struct surface *);
int setup_compound_name (struct array *, char []);
struct molecule *read_molecule (struct msscene *, char [], char [], double, FILE *, FILE *, FILE *, FILE *);
struct surface *make_bas (struct molecule *);
long create_residue_index ();
struct PlexLink *allocate_PlexLink ();
void free_PlexLink (struct PlexLink *);
struct subedge *allocate_subedge ();
void free_subedge (struct subedge *);
struct subpolygon *allocate_subpolygon ();
void free_subpolygon (struct subpolygon *);
int free_links (struct Plex *, enum PlexType type);
int cavity_component (struct surface *, int);
int mstran (struct msscene *, FILE *, FILE *, FILE *, FILE *, FILE *, int, int, double, double, struct color_ramp *, double, int);
void free_oringe (struct oringe *);
void deep_free_oringe (struct oringe *);
int count_sub_arc (struct arc *, double);
double *geo_sub_arc (struct arc *, int);
struct sector *allocate_sector ();
void free_sector (struct sector *);
struct term *allocate_term ();
void free_term (struct term *);
struct bar *allocate_bar ();
void free_bar (struct bar *);
struct hedron *newHedron (long, long, long);
void addVertex (struct hedron *, long, struct phnvtx *);
void addEdge (struct hedron *, long, struct phnedg *);
void addTriangle (struct hedron *, long, struct phntri *);
struct hedron *surfaceHedron (struct surface *);
long purifyPolyhedron (struct surface *, double);
long purifyHedron (struct hedron *, double);
void freeHedron(struct hedron *);
void allVertexGroups (struct hedron *, double);
struct vtxgrp *findVertexGroup (struct hedron *, double, long);
void identifyVertexGroup (struct hedron *, struct vtxgrp *);
void updateEdges (struct hedron *);
void markDegenerateEdges (struct hedron *);
void markDuplicateEdges (struct hedron *);
void markUnreferenced (struct hedron *);
void updateTriangles (struct hedron *);
void markDegenerateTriangles (struct hedron *);
void markDuplicateTriangles (struct hedron *);
void restoreDuplicateTriangles (struct hedron *);
long countEdgeReferences (struct hedron *, long);
long removeDegenerateTriangles (struct hedron *);
long removeDuplicateTriangles (struct hedron *);
long removeDegenerateEdges (struct hedron *);
long removeDuplicateEdges (struct hedron *);
long removeDuplicateVertices (struct hedron *);
struct hedvtx *getVertex (struct hedron *, long);
void makeContiguous (struct hedron *);
long collectChangedVertices (struct hedron *);
long collectChangedEdges (struct hedron *);
long collectChangedTriangles (struct hedron *);
long findUnusedVertex (struct hedron *);
void identifyVertexGroup (struct hedron *, struct vtxgrp *);
void averageVertexGroup (struct hedron *, struct vtxgrp *);
struct hedvtx *allocate_hedvtx ();
void free_hedvtx (struct hedvtx *);
struct hededg *allocate_hededg ();
void free_hededg (struct hededg *);
struct hedtri *allocate_hedtri ();
void free_hedtri (struct hedtri *);
struct vtxgrp *allocate_vtxgrp ();
void free_vtxgrp (struct vtxgrp *);
void removeVertex (struct hedron *, long);
void removeEdge (struct hedron *, long);
void removeTriangle (struct hedron *, long);
void newNumberVertices (struct hedron *);
void newNumberEdges (struct hedron *);
void newNumberTriangles (struct hedron *);
void updateEdgeToVertex (struct hedron *);
void updateTriangleToVertex (struct hedron *);
void updateTriangleToEdge (struct hedron *);
void compactVertices (struct hedron *);
void compactEdges (struct hedron *);
void compactTriangles (struct hedron *);
void revisePolyhedron (struct surface *, struct hedron *);
int close_enough (struct phnvtx *, struct phnvtx *, double, int);
void allVertexNeighbors (struct hedron *);
void concave_degenerate(struct surface *, struct face *);
void saddle_degenerate(struct surface *, struct face *);
int make_two (struct surface *, struct face *, struct edge *, struct edge *, struct edge *, struct edge *, int);
void hashEdges (struct hedron *);
void hashTriangles (struct hedron *);
int complement_standard (struct oringe *);
void outward_to_normal (struct surface *);
int presub (struct msscene *);
int postsub (struct msscene *);
int oncethru (struct msscene *);
int onceface (struct msscene *, unsigned long);
int oncearc (struct msscene *, unsigned long);
int print_edge (struct edge *);
int parse_source (struct msscene *, int, char [16][MAX_NAME]);

void *allocate_pointers (int, long);
int free_pointers (int, void *);
long *allocate_longs (long, int, int);
int free_longs (long *, int, int);
short *allocate_shorts (long);
int free_shorts (short *);
double *allocate_doubles (long, int, int);
int free_doubles (double *, int, int);
float *allocate_floats (long);
int free_floats (float *);
short *allocate_objects (int, long);
int free_objects (int, short *);
unsigned char *allocate_bytes (long);
int free_bytes (unsigned char *);
char *allocate_chars (long);
int free_chars (char *);
char **allocate_char_pointers (long);
int free_char_pointers (char **);
short *allocate_mem (int, int, unsigned long, unsigned long);
short *reallocate_mem (int, int, unsigned long, unsigned long, short *);
int free_mem (int, int, short *);
void update_memory (long);
atomnum *allocate_atomnums (long);
int free_atomnums (atomnum *);
atomnum *reallocate_atomnums (long, atomnum *);
void print_counts ();
struct object_block *allocate_object_block(int, int);
int free_object_block (int, struct object_block *);
int free_object_blocks (int);
int free_object_headers ();
int free_all_psl ();
int free_all_pdb ();
struct cept *new_cept (int , int , int );
void add_function (struct cept *, char *);
void add_message (struct cept *, char *);
void add_double (struct cept *, char *, double d);
void add_old ();
void add_object (struct cept *, int, char *);
void add_variable (struct cept *, int, char *);
void add_long (struct cept *, char *, long);
void print_cept (struct cept *);
void print_cepts ();
char *type_to_name (int);
char *subtype_to_name (int);
char *severity_to_name (int);
char *variable_to_name (int);
void add_atom (struct cept *, struct sphere *);
void add_source (struct cept *, char *);
void add_remedy (struct cept *, char *);
void find_quartets (struct surface *this_srf);
int compare_probes (struct probe *, struct probe *);
int same_atoms (atomnum [MAXPA], atomnum [MAXPA]);
struct pholder *add_pholder (struct pholder *, struct probe *);
void free_pholders (struct pholder *);
struct quartet *make_quartet (struct surface *, struct probe *, struct probe *);
void reduce_quartets (struct surface *);
struct quartet *merge_quartets (struct surface *, struct quartet *, struct quartet *);
void print_quartet (struct quartet *);
void cleanup_quartets (struct surface *);
void delete_quartet (struct surface *, struct quartet *);
int quartets_match (struct quartet *, struct quartet *);
void distribute_probes (struct surface *);
void count_quartets (struct surface *);
void free_quartets (struct surface *);
void link_quartet (struct surface *, struct quartet *);
void some_pholders (struct surface *, struct pholder *);
void all_quartet_tori (struct surface *);
void quartet_tori (struct surface *, struct quartet *);
void add_quartet_probes (struct surface *);
void subtract_quartet_probes (struct surface *);
struct probe *quartet_to_probe (struct surface *, struct quartet *);
void delink_probe (struct surface *, struct probe *);
int pack_atom_numbers (struct variety *, struct vtybin *) ;
int unpack_atom_numbers (struct vtybin *, struct variety *);
void renumber_probes (struct surface *);
struct cept *allocate_cept ();
struct quartet *allocate_quartet ();
struct pholder *allocate_pholder ();

